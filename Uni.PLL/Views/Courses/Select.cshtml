@using Uni.BLL.ModelVM.Course
@model CourseSelectionViewModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enroll courses</title>
    <link rel="stylesheet" href="/css/courses.css" />
    <style>
        :root {
            --primary-color: #080808; /* Abyss Black */
            --secondary-color: #1a1a1a; /* Graphite Matte */
            --text-color: #e8ecef; /* Frost White */
            --highlight-color: #2e1a47; /* Dark Plum */
            --animation: #5c4b7d; /* Muted Lilac */
        }

        body {
            font-family: "Poppins", sans-serif;
            background-color: var(--primary-color);
            color: var(--text-color);
        }

        .selector-container {
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        .selector-container {
            color: var(--text-color);
            background-color: var(--secondary-color);
            padding: 50px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-left: 340px;
            margin-top: 30px;
            width: 1500px;
            height: auto;
            border: #2e1a47 2px solid;
            animation: pulse 2s infinite;
        }

        .form-group {
            margin-bottom: 15px;
        }

        h2 {
            margin-bottom: 20px;
            color: var(--text-color);
        }

        label {
            display: block;
            margin-bottom: 10px;
            margin-top: 10px;
            font-weight: bold;
        }

        select {
            width: 80%;
            padding: 8px;
            border-radius: 5px;
            border: #2e1a47 5px solid;
        }



        table {
            width: 70%;
            margin-top: 20px;
            border-collapse: collapse;
            background: #fafafa;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 10px var(--highlight-color);
            color: #000;
            margin-bottom: 40px;
        }

        table, th, td {
            border: 1px solid #ddd;
        }

        th, td {
            padding: 10px;
            text-align: left;
        }

        button {
            background-color: var(--highlight-color);
            color: var(--text-color);
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
            width: 30%;
        }

            button:hover {
                background-color: var(--animation);
            }

        .remove-button {
            background-color: var(--highlight-color);
            color: var(--text-color);
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            margin-left: 20px;
            width: 78%;
        }

        /* Extra large devices (large desktops, 1200px and up) */
        @@media (min-width: 1200px) {
            .selector-container

        {
            margin-left: 355px;
            width: 600px;
            padding: 40px;
        }

        button {
            width: 30%;
            margin-left: 160px;
        }

        table {
            width: 80%;
        }

        }

        /* Medium to large devices (tablets to desktops, 768px - 1199px) */
        @@media (max-width: 1199px) and (min-width: 768px) {
            .selector-container

        {
            width: 60%;
            margin: 20px auto;
            padding: 30px;
        }

        button {
            width: 37%;
            margin-left: 25%;
        }

        table {
            width: 80%;
        }

        }

        /* Small devices (phones, less than 768px) */
        @@media (max-width: 767px) {
            .selector-container

        {
            width: 85%;
            margin: 20px auto;
            padding: 20px;
        }

        select {
            width: 82%;
        }

        button {
            width: 21%;
            margin-left: 154px;
        }

        table {
            width: 80%;
            font-size: 14px;
        }

        th, td {
            padding: 8px;
        }

        label {
            font-size: 14px;
        }

        }

        @@media (max-width: 500px) {
            .selector-container {
                width: 85%;
                margin: 20px auto;
                padding: 20px;
            }

            select {
                width: 60%;
            }

            button {
                width: 57%;
                margin-left: 31px;
            }

            table {
                width: 60%;
                font-size: 14px;
            }

            th, td {
                padding: 8px;
            }

            label {
                font-size: 14px;
            }
}
    </style>
</head>
<body>
    <div class="selector-container">
        <h2>Course Selection</h2>

        <label>Department</label>
        <select id="department" onchange="populateCourses()">
            <option value="" hidden>-- Select Department --</option>
            @foreach (var dept in Model.Departments)
            {
                <option value="@dept.DeptName">@dept.DeptName</option>
            }
        </select>

        <label>Level</label>
        <select id="level" onchange="populateCourses()">
            <option value="" hidden>-- Select Level --</option>
            @foreach (var level in Model.Levels)
            {
                <option value="@level">@level</option>
            }
        </select>

        <label>Semester</label>
        <select id="semester" onchange="populateCourses()">
            <option value="" hidden>-- Select Semester --</option>
            @foreach (var sem in Model.Semesters)
            {
                <option value="@sem">@sem</option>
            }
        </select>

        <label>Courses</label>
        <select id="courses">
            <option value="" >-- Select Courses --</option>
        </select>

        <h4>Selected Courses</h4>
        <table id="selectedCoursesTable">
            <thead>
                <tr>
                    <th >Selected Courses</th>
                    <th   >Credit Hours</th>
                </tr>
            </thead>
            <tbody></tbody>
            <tfoot>
                <tr>
                    <td ><strong>Total</strong></td>
                    <td   id="totalCredits"><strong>0</strong></td>
                </tr>
            </tfoot>
        </table>
        <button id="submit">Submit</button>
    </div>

    <script>
        const departmentSelect = document.getElementById("department");
        const levelSelect = document.getElementById("level");
        const semesterSelect = document.getElementById("semester");
        const coursesSelect = document.getElementById("courses");
        const tableBody = document.querySelector("#selectedCoursesTable tbody");
        const totalCreditsElem = document.getElementById("totalCredits");

        let availableCourses = [];
        let selectedCoursesList = [];

        async function populateCourses() {
          const dept = departmentSelect.value;
          const level = levelSelect.value;
          const semester = semesterSelect.value;

          coursesSelect.innerHTML = `<option value="" >-- Select Courses --</option>`;
          availableCourses = [];
          selectedCoursesList = [];
          tableBody.innerHTML = "";
          totalCreditsElem.textContent = "0";

          if (!dept || !level || !semester) return;

          try {
            const response = await fetch(`/Courses/GetCourses?department=${encodeURIComponent(dept)}&level=${encodeURIComponent(level)}&semester=${encodeURIComponent(semester)}`);
            if (!response.ok) throw new Error("Network response was not ok");
            const data = await response.json();

            availableCourses = data; // Expecting array of courses: { id, name, credits }

                   availableCourses.forEach(course => {
          const option = document.createElement("option");
          option.value = course.courseCode;  // use courseCode as the value
          option.textContent = `${course.courseName} (${course.creditHours} hrs)`;  // display name and credits
          coursesSelect.appendChild(option);
        });
          } catch (error) {
            console.error("Failed to load courses:", error);
          }
        }

        function renderSelectedCourses() {
          tableBody.innerHTML = "";
          let totalCredits = 0;
          selectedCoursesList.forEach(course => {
            totalCredits += course.credits;
            const row = `<tr><td>${course.name}</td><td>${course.credits}</td></tr>`;
            tableBody.innerHTML += row;
          });
          totalCreditsElem.textContent = totalCredits;
        }

        coursesSelect.addEventListener("change", () => {
          const selectedOptions = Array.from(coursesSelect.selectedOptions);
          selectedOptions.forEach(opt => {
                   const courseCode = opt.value;
        if (!selectedCoursesList.find(c => c.courseCode === courseCode)) {
          const courseObj = availableCourses.find(c => c.courseCode === courseCode);
          if (courseObj) {
            selectedCoursesList.push(courseObj);
          }
        }
          });

          selectedCoursesList.forEach(course => {
            const option = coursesSelect.querySelector(`option[value="${course.courseCode}"]`);
            if (option) option.remove();
          });

          renderSelectedCourses();
        });

                document.getElementById("submit").addEventListener("click", async () => {
          if (selectedCoursesList.length === 0) {
            alert("Please select at least one course.");
            return;
          }

          const selectedCourseCodes = selectedCoursesList.map(c => c.courseCode);
          const semester = document.getElementById("semester").value;
          const year = document.getElementById("level").value;

          if (!semester || !year) {
            alert("Please select both level and semester.");
            return;
          }

          // Check total credits
          const totalCredits = selectedCoursesList.reduce((sum, course) => sum + course.creditHours, 0);
          if (totalCredits < 12 || totalCredits > 16) {
            alert("Total credit hours must be between 12 and 16.");
            return ;
          }
          else if (totalCredits > 12 && totalCredits < 16 ){
              window.location.href = '/Home/Dashprofile';
              return;
          }

          try {
            const response = await fetch("/Courses/SubmitCourses", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                selectedCourseCodes,
                semester,
                year
              })
            });

            // if (response.ok) {
            //   alert("Courses submitted successfully!");
            //   // Optionally redirect or refresh
            // } else {
            //   const text = await response.text();
            //   console.error("Error submitting courses:", text);
            //   alert("Failed to submit courses.");
            // }
          } catch (error) {
            console.error("Error:", error);
            alert("An error occurred while submitting.");
          }
        });
                function removeSelectedCourse(index) {
          const courseToRemove = selectedCoursesList[index];

          // Remove from selectedCoursesList
          selectedCoursesList.splice(index, 1);

          // Add it back to the courses select list
          const option = document.createElement("option");
          option.value = courseToRemove.courseCode;
          option.textContent = `${courseToRemove.courseName} (${courseToRemove.creditHours} hrs)`;
          coursesSelect.appendChild(option);

          renderSelectedCourses();
        }

                function renderSelectedCourses() {
          tableBody.innerHTML = "";
          let totalCredits = 0;

          selectedCoursesList.forEach((course, index) => {
            totalCredits += course.creditHours;
            const row = document.createElement("tr");

            // Course name cell
            const nameCell = document.createElement("td");
            nameCell.textContent = course.courseName;
            row.appendChild(nameCell);

            // Credit hours cell
            const creditCell = document.createElement("td");
            creditCell.textContent = course.creditHours;
            row.appendChild(creditCell);

            // Remove button cell
            const removeCell = document.createElement("td");
            const removeBtn = document.createElement("button");
            removeBtn.type = "button";
            removeBtn.textContent = "Remove";
            removeBtn.classList.add("remove-button");
            removeBtn.addEventListener("click", () => {
              removeSelectedCourse(index);
            });
            removeCell.appendChild(removeBtn);
            row.appendChild(removeCell);

            tableBody.appendChild(row);
          });

          totalCreditsElem.textContent = totalCredits;
        }
    </script>
</body>
</html>












































@* @using Uni.BLL.ModelVM.Course
@model CourseSelectionViewModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Enroll courses</title>

    <link rel="stylesheet" href="/css/courses.css" />

</head>
<body>
<div class="container">
    <form method="post" id="courseForm">
        <h2>Course Selection</h2>

        <label>Department</label>
        <select id="department" onchange="populateCourses()">
            @foreach (var dept in Model.Departments)
            {
                <option>@dept.DeptName</option>
            }
        </select>

        <label>Level</label>
        <select id="level" onchange="populateCourses()">
            @foreach (var level in Model.Levels)
            {
                <option>@level</option>
            }
        </select>

        <label>Semester</label>
        <select id="semester" onchange="populateCourses()">
            @foreach (var sem in Model.Semesters)
            {
                <option>@sem</option>
            }
        </select>
            <label>Courses</label>
            <select id="courses" onchange="addCourse()" class="form-control">
                <option value="">-- Select Courses --</option>
            </select>

            <h3>Selected Courses</h3>
            <table class="table" id="selectedCoursesTable">
                <tbody></tbody>
                <tfoot>
                    <tr>
                        <td><strong>Total</strong></td>
                        <td id="totalCredits"><strong>0</strong></td>
                    </tr>
                </tfoot>
            </table>

            <input type="hidden" name="selectedCourseIds" id="selectedCourseIds" />
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>

    @section Scripts {
        <script>
            let selectedCourses = [];
            let totalCredits = 0;

            function populateCourses() {
                const dept = document.getElementById("department").value;
                const year = document.getElementById("level").value;  // 'level' passed as 'year'
                const semester = document.getElementById("semester").value;

                fetch(`/Course/GetCourses?department=${encodeURIComponent(dept)}&year=${encodeURIComponent(year)}&semester=${encodeURIComponent(semester)}`)
                    .then(res => res.json())
                    .then(data => {
                        const courseDropdown = document.getElementById("courses");
                        courseDropdown.innerHTML = `<option value="">-- Select Courses --</option>`;
                        data.forEach(course => {
                            const opt = document.createElement("option");
                            opt.value = course.id;  // Should match controller's JSON field
                            opt.text = `${course.name} (${course.creditHours})`;
                            courseDropdown.appendChild(opt);
                        });
                    })
                    .catch(err => console.error("Failed to load courses:", err));
            }

            function addCourse() {
                const courseDropdown = document.getElementById("courses");
                const selectedId = courseDropdown.value;
                const selectedText = courseDropdown.options[courseDropdown.selectedIndex].text;

                if (!selectedId || selectedCourses.find(c => c.id === selectedId)) return;

                const credit = parseInt(selectedText.match(/\((\d+)\)/)[1]);
                totalCredits += credit;
                selectedCourses.push({ id: selectedId, text: selectedText, credit });

                const row = `<tr><td>${selectedText}</td><td>${credit}</td></tr>`;
                document.querySelector("#selectedCoursesTable tbody").innerHTML += row;
                document.getElementById("totalCredits").textContent = totalCredits;

                document.getElementById("selectedCourseIds").value = selectedCourses.map(c => c.id).join(",");
            }

            document.getElementById("courseForm").addEventListener("submit", function (e) {
                const hidden = document.createElement("input");
                hidden.type = "hidden";
                hidden.name = "selectedCourseIds";
                hidden.value = selectedCourses.map(c => c.id).join(",");
                this.appendChild(hidden);
            });

            window.onload = populateCourses;
        </script>
    }
</body>
</html>

 *@

@* 

 @using Uni.BLL.ModelVM.Course
@model CourseSelectionViewModel

<div class="container">
    <form method="post" id="courseForm">
        <h2>Course Selection</h2>

        <label>Department</label>
        <select id="department" onchange="populateCourses()">
            @foreach (var dept in Model.Departments)
            {
                <option>@dept.DeptName</option>
            }
        </select>

        <label>Level</label>
        <select id="level" onchange="populateCourses()">
            @foreach (var level in Model.Levels)
            {
                <option>@level</option>
            }
        </select>

        <label>Semester</label>
        <select id="semester" onchange="populateCourses()">
            @foreach (var sem in Model.Semesters)
            {
                <option>@sem</option>
            }
        </select>

        <label>Courses</label>
        <select id="courses" onchange="addCourse()" class="form-control">
            <option value="">-- Select Courses --</option>
        </select>

        <h3>Selected Courses</h3>
        <table class="table" id="selectedCoursesTable">
            <tbody></tbody>
            <tfoot>
                <tr>
                    <td><strong>Total</strong></td>
                    <td id="totalCredits"><strong>0</strong></td>
                </tr>
            </tfoot>
        </table>

        <input type="hidden" name="selectedCourseIds" id="selectedCourseIds" />
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
</div>

@section Scripts {
    <script>
        let selectedCourses = [];
        let totalCredits = 0;

        function populateCourses() {
            const dept = document.getElementById("department").value;
            const level = document.getElementById("level").value;
            const semester = document.getElementById("semester").value;

            fetch(`/Course/GetCourses?department=${dept}&level=${level}&semester=${semester}`)
                .then(res => res.json())
                .then(data => {
                    const courseDropdown = document.getElementById("courses");
                    courseDropdown.innerHTML = `<option value="">-- Select Courses --</option>`;
                    data.forEach(course => {
                        const opt = document.createElement("option");
                        opt.value = course.id;
                        opt.text = `${course.name} (${course.creditHours})`;
                        courseDropdown.appendChild(opt);
                    });
                });
        }

        function addCourse() {
            const courseDropdown = document.getElementById("courses");
            const selectedId = parseInt(courseDropdown.value);
            const selectedText = courseDropdown.options[courseDropdown.selectedIndex].text;

            if (!selectedId || selectedCourses.find(c => c.id === selectedId)) return;

            const credit = parseInt(selectedText.match(/\((\d+)\)/)[1]);
            totalCredits += credit;
            selectedCourses.push({ id: selectedId, text: selectedText, credit });

            const row = `<tr><td>${selectedText}</td><td>${credit}</td></tr>`;
            document.querySelector("#selectedCoursesTable tbody").innerHTML += row;
            document.getElementById("totalCredits").textContent = totalCredits;

            document.getElementById("selectedCourseIds").value = selectedCourses.map(c => c.id).join(",");
        }

        document.getElementById("courseForm").addEventListener("submit", function (e) {
            const form = this;
            const hidden = document.createElement("input");
            hidden.name = "selectedCourseIds";
            hidden.value = selectedCourses.map(c => c.id).join(",");
            form.appendChild(hidden);
        });
    </script>
}






@{
    ViewData["Title"] = "Select";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Select Courses</h2>

<form asp-action="GetCourses" method="post" id="filterForm">
    <label>Department:</label>
    <select name="departmentName" id="department" class="form-control" required>
        <option value="">-- Select Department --</option>
        @foreach (var dept in ViewBag.Departments)
        {
            <option value="@dept.DeptName">@dept.DeptName</option>
        }
    </select>

    <label>Year:</label>
    <select name="year" class="form-control" required>
        @foreach (var year in ViewBag.Years)
        {
            <option value="@year">@year</option>
        }
    </select>

    <label>Semester:</label>
    <select name="semester" class="form-control" required>
        @foreach (var sem in ViewBag.Semesters)
        {
            <option value="@sem">@sem</option>
        }
    </select>

    <button type="submit" class="btn btn-primary mt-2">Load Courses</button>
</form>

<div id="courseContainer">
    <!-- Loaded course checkboxes will appear here -->
</div>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger mt-3">@TempData["Error"]</div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success mt-3">@TempData["Success"]</div>
}
 *@
 